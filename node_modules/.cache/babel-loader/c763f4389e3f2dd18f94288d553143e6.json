{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kodragjini\\\\Documents\\\\React\\\\posts-app\\\\src\\\\PostsPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Posts from \"./Posts\";\nexport default function PostsPage() {\n  const [error, setError] = useState(null);\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [currentPost, setCurrentPost] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  function getPosts() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\").then(res => res.json()).then(results => {\n      setPosts(results);\n    }).catch(error => {\n      setError(error);\n    }).finally(() => setLoadingPosts(false));\n  }\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  function isDeletingPost(id, loadingDel) {\n    const newPosts = posts.map(p => ({ ...p\n    }));\n    const index = posts.findIndex(post => post.id === id);\n    newPosts[index].isLoadingDelete = loadingDel;\n    return newPosts;\n  }\n\n  function handleDelete(id) {\n    setPosts(isDeletingPost(id, true));\n    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n      method: \"DELETE\"\n    }).then(() => {\n      getPosts();\n    }).catch(err => {\n      setPosts(isDeletingPost(id, false));\n    });\n  }\n\n  function handleDetails(id) {\n    const newPosts = posts.map(p => ({ ...p\n    }));\n    const index = posts.findIndex(post => post.id === id);\n    setCurrentPost(newPosts[index]);\n  }\n\n  return /*#__PURE__*/React.createElement(Posts, {\n    error: error,\n    setError: setError,\n    loadingPosts: loadingPosts,\n    setLoadingPosts: setLoadingPosts,\n    posts: currentPosts,\n    setPosts: setPosts,\n    getPosts: getPosts,\n    isDeletingPost: isDeletingPost,\n    handleDelete: handleDelete,\n    handleDetails: handleDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Kodragjini/Documents/React/posts-app/src/PostsPage.jsx"],"names":["React","useState","useEffect","Posts","PostsPage","error","setError","loadingPosts","setLoadingPosts","posts","setPosts","currentPost","setCurrentPost","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","getPosts","fetch","then","res","json","results","catch","finally","indexOfLastPost","indexOfFirstPost","currentPosts","slice","isDeletingPost","id","loadingDel","newPosts","map","p","index","findIndex","post","isLoadingDelete","handleDelete","method","err","handleDetails"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Posts from \"./Posts\";\r\n\r\nexport default function PostsPage() {\r\n  const [error, setError] = useState(null);\r\n  const [loadingPosts, setLoadingPosts] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [currentPost, setCurrentPost] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage, setPostsPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  function getPosts() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((res) => res.json())\r\n      .then((results) => {\r\n        setPosts(results);\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n      })\r\n      .finally(() => setLoadingPosts(false));\r\n  }\r\n\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  function isDeletingPost(id, loadingDel) {\r\n    const newPosts = posts.map((p) => ({ ...p }));\r\n    const index = posts.findIndex((post) => post.id === id);\r\n    newPosts[index].isLoadingDelete = loadingDel;\r\n    return newPosts;\r\n  }\r\n\r\n  function handleDelete(id) {\r\n    setPosts(isDeletingPost(id, true));\r\n    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        getPosts();\r\n      })\r\n      .catch((err) => {\r\n        setPosts(isDeletingPost(id, false));\r\n      });\r\n  }\r\n\r\n  function handleDetails(id) {\r\n    const newPosts = posts.map((p) => ({ ...p }));\r\n    const index = posts.findIndex((post) => post.id === id);\r\n    setCurrentPost(newPosts[index]);\r\n  }\r\n  return (\r\n    <Posts\r\n      error={error}\r\n      setError={setError}\r\n      loadingPosts={loadingPosts}\r\n      setLoadingPosts={setLoadingPosts}\r\n      posts={currentPosts}\r\n      setPosts={setPosts}\r\n      getPosts={getPosts}\r\n      isDeletingPost={isDeletingPost}\r\n      handleDelete={handleDelete}\r\n      handleDetails={handleDetails}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}